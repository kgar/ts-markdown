var tsMarkdown = (function (e) {
  'use strict';
  const n = (e, n) => {
    if ('footnote' in e) return `[^${e.footnote.id}]`;
    throw new Error('Entry is not a footnote entry. Unable to render.');
  };
  function t(e, n, r) {
    var t,
      e = (function r(t) {
        return Array.isArray(t)
          ? t.reduce((e, n) => [...e, ...r(n)], [])
          : null !== t && 'object' == typeof t && 'footnote' in t
          ? [t]
          : null !== t && 'object' == typeof t
          ? Object.keys(t).reduce((e, n) => [...e, ...r(t[n])], [])
          : [];
      })(e);
    return (
      0 < e.length &&
        (n +=
          '\n\n' +
          ((t = r),
          e
            .map((r) => {
              return o(
                Array.isArray(r.footnote.content)
                  ? r.footnote.content
                  : [r.footnote.content],
                t
              )
                .split('\n')
                .map((e, n) => {
                  return (0 === n ? `[^${r.footnote.id}]: ` : '    ') + e;
                })
                .join('\n');
            })
            .join('\n\n'))),
      n
    );
  }
  function o(t, o) {
    var i,
      l = o.prefix ?? '';
    let u = '';
    for (const [s, c] of t.entries()) {
      (a = l), (d = s), (i = c);
      let n = 'string' != typeof a ? a(d, i) : a;
      var a,
        d = f(c, o);
      let { markdown: e, blockLevel: r } =
        'string' == typeof d ? { markdown: d, blockLevel: !1 } : d;
      (u += e
        .split('\n')
        .map((e) => n + e)
        .join('\n')),
        (i = c) &&
          'object' == typeof i &&
          'append' in i &&
          '' !== (a = f(c.append, o)) &&
          (u += '\n' + a),
        s < t.length - 1 && (u += '\n'),
        s < t.length - 1 && r && (u = u + n + '\n');
    }
    return u;
  }
  function f(n, r) {
    if (null === n && r.renderers?.null) return r.renderers.null(n, r);
    if (void 0 === n && r.renderers?.null) return r.renderers.undefined(n, r);
    if ('string' == typeof n && r.renderers?.string)
      return r.renderers.string(n, r);
    if ('boolean' == typeof n && r.renderers?.boolean)
      return r.renderers.boolean(n, r);
    if ('number' == typeof n && r.renderers?.number)
      return r.renderers.number(n, r);
    if ('bigint' == typeof n && r.renderers?.bigint)
      return r.renderers.bigint(n, r);
    if (n instanceof Date && r.renderers?.date) return r.renderers.date(n, r);
    if ('object' == typeof n)
      for (var t in n) {
        let e = r.renderers?.[t];
        if (e) return e(n, r);
      }
    return '';
  }
  const r = (e, n) => {
    if ('blockquote' in e)
      return {
        markdown: o(
          Array.isArray(e.blockquote) ? e.blockquote : [e.blockquote],
          { ...n, prefix: '> ' }
        ),
        blockLevel: !0,
      };
    throw new Error('Entry is not a blockquote entry. Unable to render.');
  };
  const i = (e, n) => {
    var r;
    if ('bold' in e)
      return (
        '' +
        (r = e.indicator ?? n.boldIndicator ?? '*') +
        r +
        f(e.bold, n) +
        r +
        r
      );
    throw new Error('Entry is not a bold entry. Unable to render.');
  };
  const l = (e, n) => {
    if ('code' in e) {
      let r = 0;
      e.code.split('').reduce((e, n) => {
        n = '`' === n ? e + 1 : 0;
        return (r = Math.max(r, n)), n;
      }, 0);
      var t = e.code.startsWith('`') ? ' ' : '',
        o = e.code.endsWith('`') ? ' ' : '',
        i = ''.padEnd(r + 1, '`');
      return i + t + e.code + o + i;
    }
    throw new Error('Entry is not a code entry. Unable to render.');
  };
  const u = (e, r) => {
    var t = r.useCodeblockFencing ?? e.fenced;
    if ('codeblock' in e) {
      let n = t ? '' : '    ';
      var o = t
          ? (function (e, n) {
              (e = a(e)), (n = n ?? '');
              return e + e + e + n;
            })(t, e.language) + '\n'
          : '',
        t = t
          ? '\n' +
            (function (e, n) {
              e = a(e.fenced ?? n.useCodeblockFencing);
              return e + e + e;
            })(e, r)
          : '';
      return {
        markdown:
          o +
          ('string' == typeof e.codeblock
            ? n + e.codeblock.split('\n').join('\n' + n)
            : e.codeblock.map((e) => n + e).join('\n')) +
          t,
        blockLevel: !0,
      };
    }
    throw new Error('Entry is not a codeblock entry. Unable to render.');
  };
  function a(e) {
    return '~' === e ? '~' : '`';
  }
  const d = (r, t) => {
    if ('dl' in r) {
      var o,
        i,
        l = t.useDescriptionListHtml ?? r.html,
        u = l ? '    <dt>' : '',
        a = l ? '</dt>' : '',
        d = l ? '    <dd>' : ': ',
        s = l ? '</dd>' : '';
      let e = [],
        n = (l && e.push('<dl>'), void 0);
      for (o of r.dl)
        'dt' in o && 'dd' === n && 0 < e.length && e.push('\n'),
          'dt' in o
            ? ((i = u + f(o.dt, t) + a), e.push(i), (n = 'dt'))
            : 'dd' in o && ((i = d + f(o.dd, t) + s), e.push(i), (n = 'dd'));
      return l && e.push('</dl>'), { markdown: e.join('\n'), blockLevel: !0 };
    }
    throw new Error('Entry is not a dl entry. Unable to render.');
  };
  const s = (e, n) => {
    if ('emoji' in e) return `:${e.emoji}:`;
    throw new Error('Entry is not an emoji entry. Unable to render.');
  };
  function c(e, n = '') {
    return void 0 !== e ? n + `{#${e}}` : '';
  }
  const h = (n, r) => {
    if ('h1' in n) {
      var t = n.underline ?? r.useH1Underlining;
      let e = (t ? '' : '# ') + f(n.h1, r) + c(n.id, ' ');
      return (
        t && (e += '\n' + ''.padEnd(e.length, '=')),
        { markdown: e, blockLevel: !0 }
      );
    }
    throw new Error('Entry is not an h1 entry. Unable to render.');
  };
  const p = (n, r) => {
    if ('h2' in n) {
      var t = n.underline ?? r.useH2Underlining;
      let e = (t ? '' : '## ') + f(n.h2, r) + c(n.id, ' ');
      return (
        t && (e += '\n' + ''.padEnd(e.length, '-')),
        { markdown: e, blockLevel: !0 }
      );
    }
    throw new Error('Entry is not an h2 entry. Unable to render.');
  };
  const b = (e, n) => {
    if ('h3' in e)
      return { markdown: '### ' + f(e.h3, n) + c(e.id, ' '), blockLevel: !0 };
    throw new Error('Entry is not an h3 entry. Unable to render.');
  };
  const g = (e, n) => {
    if ('h4' in e)
      return { markdown: '#### ' + f(e.h4, n) + c(e.id, ' '), blockLevel: !0 };
    throw new Error('Entry is not an h4 entry. Unable to render.');
  };
  const y = (e, n) => {
    if ('h5' in e)
      return { markdown: '##### ' + f(e.h5, n) + c(e.id, ' '), blockLevel: !0 };
    throw new Error('Entry is not an h5 entry. Unable to render.');
  };
  const k = (e, n) => {
    if ('h6' in e)
      return {
        markdown: '###### ' + f(e.h6, n) + c(e.id, ' '),
        blockLevel: !0,
      };
    throw new Error('Entry is not an h6 entry. Unable to render.');
  };
  const m = (e, n) => {
    if ('highlight' in e) return `==${f(e.highlight, n)}==`;
    throw new Error('Entry is not a highlight entry. Unable to render.');
  };
  const w = (e, n) => {
    if ('hr' in e)
      return {
        markdown: '' + (e = e.indicator ?? '-') + e + e,
        blockLevel: !0,
      };
    throw new Error('Entry is not an hr entry. Unable to render.');
  };
  const E = (e, n) => {
    var r, t;
    if ('img' in e)
      return (
        (r = e.img.source.replace(/\s/g, '%20')),
        (t = void 0 !== e.img.title ? ` "${e.img.title}"` : ''),
        `![${e.img.alt ?? ''}](${r}${t})`
      );
    throw new Error('Entry is not an img entry. Unable to render.');
  };
  const x = (e, n) => {
    var r;
    if ('italic' in e)
      return (
        '' + (r = e.indicator ?? n.italicIndicator ?? '*') + f(e.italic, n) + r
      );
    throw new Error('Entry is not an italic entry. Unable to render.');
  };
  const v = (e, n) => {
    if ('link' in e) {
      var r = e.link.href.replace(/\s/g, '%20');
      if (!e.link.text) return `<${r}>`;
      var t = void 0 !== e.link.title ? ` "${e.link.title}"` : '';
      return `[${e.link.text}](${r}${t})`;
    }
    throw new Error('Entry is not a link entry. Unable to render.');
  };
  const R = (e, r) => {
    if ('ol' in e)
      return {
        markdown: e.ol
          .map((e, n) =>
            o(Array.isArray(e) ? e : [e], {
              ...r,
              prefix: (e) => (0 === e ? n + 1 + '. ' : '    '),
            })
          )
          .join('\n'),
        blockLevel: !0,
      };
    throw new Error('Entry is not an ol entry. Unable to render.');
  };
  const $ = (e, n) => {
    if ('p' in e)
      return {
        markdown:
          'string' ==
          typeof (e = (function (e, n) {
            if ('string' == typeof e.p) return f(j(e.p), n);
            if (Array.isArray(e.p)) return j(e.p.map((e) => f(e, n)).join(''));
            (e = f(e.p, n)), (e = 'string' == typeof e ? e : e.markdown);
            return j(e)
              .split('\n')
              .map((e) => j(e))
              .join('\n');
          })(e, n))
            ? e
            : e.markdown,
        blockLevel: !0,
      };
    throw new Error('Entry is not a p entry. Unable to render.');
  };
  function j(e) {
    return e
      ?.trimStart()
      .replace(/(^.*?)[\t]+/g, '')
      .trimStart();
  }
  const U = (e, n) => {
    if ('strikethrough' in e) return `~~${f(e.strikethrough, n)}~~`;
    throw new Error('Entry is not a strikethrough entry. Unable to render.');
  };
  const A = (e) => e,
    _ = (e) => '',
    L = (e) => '',
    S = (e) => e.toString(),
    q = (e) => e.toString(),
    M = (e) => e.toString(),
    D = (e) => e.toISOString(),
    I = (e, n) => {
      var r, t;
      if ('sub' in e)
        return (
          (t = (r = e.html ?? n.useSubscriptHtml ?? !1) ? '</sub>' : '~'),
          (r ? '<sub>' : '~') + f(e.sub, n) + t
        );
      throw new Error('Entry is not a sub entry. Unable to render.');
    };
  const O = (e, n) => {
    var r, t;
    if ('sup' in e)
      return (
        (t = (r = e.html ?? n.useSuperscriptHtml ?? !1) ? '</sup>' : '^'),
        (r ? '<sup>' : '^') + f(e.sup, n) + t
      );
    throw new Error('Entry is not an sup entry. Unable to render.');
  };
  const C = (e, n) => {
    if ('table' in e)
      return {
        markdown: (function (n, o) {
          !(function n(r) {
            if ('string' == typeof r) return r.replaceAll('|', '&#124;');
            if (Array.isArray(r))
              for (let e = 0; e < r.length; e++) r[e] = n(r[e]);
            if ('object' == typeof r && null !== r) {
              let e = r;
              for (var t of Object.keys(e)) e[t] = n(e[t]);
            }
            return r;
          })(n);
          let e = n.table.columns.length,
            i =
              (n.table.columns.reduce(
                (e, n) => e.concat('string' == typeof n ? n : n.name),
                []
              ),
              []);
          for (let t = 0; t < e; t++) {
            let r = n.table.columns[t],
              e = [
                (function (e) {
                  return ('string' == typeof e ? e : e.name).length;
                })(n.table.columns[t]),
                ...n.table.rows
                  .reduce((e, n) => {
                    n = Array.isArray(n) ? n[t] : n[W(r)];
                    if (void 0 !== n) {
                      n = F(n, o);
                      if ('string' != typeof n)
                        throw new Error(
                          'Unknown table rendering scenario encountered. Multi-line table cell content is not supported.'
                        );
                      e.push(n);
                    }
                    return e;
                  }, [])
                  .map((e) => e.length),
              ];
            i[t] = e.reduce((e, n) => Math.max(3, e, n), 0);
          }
          return [
            (function (e, r, t) {
              return `| ${e.table.columns
                .map((e, n) =>
                  H(
                    (function (e) {
                      return 'string' == typeof e ? e : e.name;
                    })(e),
                    r[n],
                    t[n]
                  )
                )
                .join(' | ')} |`;
            })(n, i, n.table.columns),
            (function (e, r) {
              return `|${e
                .map(
                  (e, n) =>
                    (function (e) {
                      return 'string' != typeof e &&
                        ('left' === e.align || 'center' === e.align)
                        ? ':'
                        : ' ';
                    })(r[n]) +
                    ''.padStart(e, '-') +
                    (function (e) {
                      return 'string' != typeof e &&
                        ('right' === e.align || 'center' === e.align)
                        ? ':'
                        : ' ';
                    })(r[n])
                )
                .join('|')}|`;
            })(i, n.table.columns),
            ...(function (o, i, n, l) {
              return o.table.rows.map((t) => {
                let e = [];
                return (
                  Array.isArray(t)
                    ? (e = [
                        ...t.map((e, n) =>
                          H(F(e, l), i[n], o.table.columns[n])
                        ),
                      ])
                    : 'object' == typeof t &&
                      (e = n.reduce(
                        (e, n, r) =>
                          e.concat(
                            H(F(t[W(n)], l) ?? '', i[r], o.table.columns[r])
                          ),
                        []
                      )),
                  `| ${e.join(' | ')} |`
                );
              });
            })(n, i, n.table.columns, o),
          ].join('\n');
        })(e, n),
        blockLevel: !0,
      };
    throw new Error('Entry is not a table entry. Unable to render.');
  };
  function F(e, n) {
    return o([e], n);
  }
  function H(e, n, r) {
    return 'string' != typeof r && 'left' !== r.align && r.align
      ? 'center' === r.align
        ? e
            .padStart(e.length + Math.floor(n - e.length) / 2, ' ')
            .padEnd(n, ' ')
        : 'right' === r.align
        ? e.padStart(n, ' ')
        : e
      : e.padEnd(n, ' ');
  }
  function W(e) {
    return 'string' == typeof e ? e : e.field ?? e.name;
  }
  const P = (e, n) => {
    if ('tasks' in e)
      return {
        markdown:
          ((o = n),
          e.tasks
            .map((e) => {
              let n = !1,
                r = '';
              if ('string' == typeof e) r = e;
              else if ('task' in e) {
                n = !0 === e.completed;
                var t = f(e.task, o);
                if ('string' != typeof t)
                  throw new Error(
                    'Unexpected rendering scenario encountered. A task list item cannot have multi-line content.'
                  );
                r = t;
              } else {
                t = f(e, o);
                if ('string' != typeof t)
                  throw new Error(
                    'Unexpected rendering scenario encountered. A task list item cannot have multi-line content.'
                  );
                r = t;
              }
              return `- [${n ? 'x' : ' '}] ` + r;
            })
            .join('\n')),
        blockLevel: !0,
      };
    var o;
    throw new Error('Entry is not a tasks entry. Unable to render.');
  };
  const T = (e, n) => {
    if ('text' in e)
      return (Array.isArray(e.text) ? e.text : [e.text])
        .map((e) => f(e, n))
        .join('');
    throw new Error('Entry is not a text entry. Unable to render.');
  };
  const z = (e, n) => {
    if ('ul' in e)
      return {
        markdown: (function (e, n) {
          let r = e.indicator ?? n.unorderedListItemIndicator ?? '-';
          return e.ul
            .map((e) =>
              Array.isArray(e)
                ? o(e, { ...n, prefix: (e) => (0 === e ? r + ' ' : '    ') })
                : r + ' ' + f(e, n)
            )
            .map((e) => e.replace(/^([\-\+\*]\s[\d]+)(\.)/, '$1\\.'))
            .join('\n');
        })(e, n),
        blockLevel: !0,
      };
    throw new Error('Entry is not an ul entry. Unable to render.');
  };
  function B(e = {}) {
    return {
      string: A,
      null: _,
      undefined: L,
      boolean: S,
      number: q,
      bigint: M,
      date: D,
      h1: h,
      h2: p,
      h3: b,
      h4: g,
      h5: y,
      h6: k,
      blockquote: r,
      bold: i,
      code: l,
      codeblock: u,
      dl: d,
      emoji: s,
      footnote: n,
      highlight: m,
      hr: w,
      img: E,
      italic: x,
      link: v,
      ol: R,
      p: $,
      strikethrough: U,
      sub: I,
      sup: O,
      table: C,
      tasks: P,
      text: T,
      ul: z,
      ...e,
    };
  }
  return (
    (e.appendFootnotes = t),
    (e.bigintRenderer = M),
    (e.blockquote = function (e, n) {
      return { blockquote: e, ...n };
    }),
    (e.blockquoteRenderer = r),
    (e.bold = function (e, n) {
      return { bold: e, ...n };
    }),
    (e.boldRenderer = i),
    (e.booleanRenderer = S),
    (e.code = function (e, n) {
      return { code: e, ...n };
    }),
    (e.codeRenderer = l),
    (e.codeblock = function (e, n) {
      return { codeblock: e, ...n };
    }),
    (e.codeblockRenderer = u),
    (e.dateRenderer = D),
    (e.dl = function (e, n) {
      return { dl: e, ...n };
    }),
    (e.dlRenderer = d),
    (e.emoji = function (e, n) {
      return { emoji: e, ...n };
    }),
    (e.emojiRenderer = s),
    (e.footnote = function (e, n, r) {
      return { footnote: { id: e, content: n }, ...r };
    }),
    (e.footnoteRenderer = n),
    (e.getMarkdownString = f),
    (e.getOptionalHeaderIdText = c),
    (e.getRenderers = B),
    (e.h1 = function (e, n) {
      return { h1: e, ...n };
    }),
    (e.h1Renderer = h),
    (e.h2 = function (e, n) {
      return { h2: e, ...n };
    }),
    (e.h2Renderer = p),
    (e.h3 = function (e, n) {
      return { h3: e, ...n };
    }),
    (e.h3Renderer = b),
    (e.h4 = function (e, n) {
      return { h4: e, ...n };
    }),
    (e.h4Renderer = g),
    (e.h5 = function (e, n) {
      return { h5: e, ...n };
    }),
    (e.h5Renderer = y),
    (e.h6 = function (e, n) {
      return { h6: e, ...n };
    }),
    (e.h6Renderer = k),
    (e.header = function (e, n, r) {
      switch (e) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          return { ['h' + e]: n, ...r };
        default:
          throw new Error(`Header level ${e} is not supported.`);
      }
    }),
    (e.highlight = function (e, n) {
      return { highlight: e, ...n };
    }),
    (e.highlightRenderer = m),
    (e.hr = function (e) {
      return { hr: !0, ...e };
    }),
    (e.hrRenderer = w),
    (e.img = function (e) {
      return { img: e };
    }),
    (e.imgRenderer = E),
    (e.italic = function (e, n) {
      return { italic: e, ...n };
    }),
    (e.italicRenderer = x),
    (e.link = function (e) {
      return { link: e };
    }),
    (e.linkRenderer = v),
    (e.nullRenderer = _),
    (e.numberRenderer = q),
    (e.ol = function (e, n) {
      return { ol: e, ...n };
    }),
    (e.olRenderer = R),
    (e.p = function (e, n) {
      return { p: e, ...n };
    }),
    (e.pRenderer = $),
    (e.renderEntries = o),
    (e.strikethrough = function (e, n) {
      return { strikethrough: e, ...n };
    }),
    (e.strikethroughRenderer = U),
    (e.stringRenderer = A),
    (e.sub = function (e, n) {
      return { sub: e, ...n };
    }),
    (e.subRenderer = I),
    (e.sup = function (e, n) {
      return { sup: e, ...n };
    }),
    (e.supRenderer = O),
    (e.table = function (e, n) {
      return { table: e, ...n };
    }),
    (e.tableRenderer = C),
    (e.tasks = function (e, n) {
      return { tasks: e, ...n };
    }),
    (e.tasksRenderer = P),
    (e.text = function (e) {
      return { text: e };
    }),
    (e.textRenderer = T),
    (e.tsMarkdown = function (e, n) {
      (n ??= { prefix: '' }).renderers ??= B();
      let r = o(e, n);
      return (
        (r = t(
          e,
          (r = n.onDocumentFootnoteAppending
            ? n.onDocumentFootnoteAppending(e, r, n)
            : r),
          n
        )),
        (r = (r = n.onDocumentFootnoteAppended
          ? n.onDocumentFootnoteAppended(e, r, n)
          : r)
          .replace(
            /(?<pretext>[^\_^\s])(?<prefix1>[\_]{3})(?<text1>[^\s^\_]+)(?<suffix1>[\_]{3})|(?<prefix2>[\_]{3})(?<text2>[^\s^\_]+)(?<suffix2>[\_]{3})(?<posttext>[^\_^\s])/g,
            '$<pretext>***$<text1>$<text2>***$<posttext>'
          )
          .replace(
            /(?<pretext>[^\_^\s])(?<prefix1>[\_]{2})(?<text1>[^\s^\_]+)(?<suffix1>[\_]{2})|(?<prefix2>[\_]{2})(?<text2>[^\s^\_]+)(?<suffix2>[\_]{2})(?<posttext>[^\_^\s])/g,
            '$<pretext>**$<text1>$<text2>**$<posttext>'
          )
          .replace(
            /(?<pretext>[^\_^\s])(?<prefix1>[\_]{1})(?<text1>[^\s^\_]+)(?<suffix1>[\_]{1})|(?<prefix2>[\_]{1})(?<text2>[^\s^\_]+)(?<suffix2>[\_]{1})(?<posttext>[^\_^\s])/g,
            '$<pretext>*$<text1>$<text2>*$<posttext>'
          ))
      );
    }),
    (e.ul = function (e, n) {
      return { ul: e, ...n };
    }),
    (e.ulRenderer = z),
    (e.undefinedRenderer = L),
    Object.defineProperty(e, '__esModule', { value: !0 }),
    e
  );
})({});
